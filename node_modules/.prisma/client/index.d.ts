
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type NoticeAdvancedPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "NoticeAdvanced"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    title: string
    desc: string
    date: string
    content: string
  }, ExtArgs["result"]["noticeAdvanced"]>
  composites: {}
}

/**
 * Model NoticeAdvanced
 * 
 */
export type NoticeAdvanced = runtime.Types.DefaultSelection<NoticeAdvancedPayload>
export type NoticeBasicPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "NoticeBasic"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    date: string
    content: string
  }, ExtArgs["result"]["noticeBasic"]>
  composites: {}
}

/**
 * Model NoticeBasic
 * 
 */
export type NoticeBasic = runtime.Types.DefaultSelection<NoticeBasicPayload>
export type GraduatesYearPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "GraduatesYear"
  objects: {}
  scalars: $Extensions.GetResult<{
    year: number
    graduates: string
  }, ExtArgs["result"]["graduatesYear"]>
  composites: {}
}

/**
 * Model GraduatesYear
 * 
 */
export type GraduatesYear = runtime.Types.DefaultSelection<GraduatesYearPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more NoticeAdvanceds
 * const noticeAdvanceds = await prisma.noticeAdvanced.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more NoticeAdvanceds
   * const noticeAdvanceds = await prisma.noticeAdvanced.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.noticeAdvanced`: Exposes CRUD operations for the **NoticeAdvanced** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NoticeAdvanceds
    * const noticeAdvanceds = await prisma.noticeAdvanced.findMany()
    * ```
    */
  get noticeAdvanced(): Prisma.NoticeAdvancedDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.noticeBasic`: Exposes CRUD operations for the **NoticeBasic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NoticeBasics
    * const noticeBasics = await prisma.noticeBasic.findMany()
    * ```
    */
  get noticeBasic(): Prisma.NoticeBasicDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.graduatesYear`: Exposes CRUD operations for the **GraduatesYear** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GraduatesYears
    * const graduatesYears = await prisma.graduatesYear.findMany()
    * ```
    */
  get graduatesYear(): Prisma.GraduatesYearDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    NoticeAdvanced: 'NoticeAdvanced',
    NoticeBasic: 'NoticeBasic',
    GraduatesYear: 'GraduatesYear'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'noticeAdvanced' | 'noticeBasic' | 'graduatesYear'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      NoticeAdvanced: {
        payload: NoticeAdvancedPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.NoticeAdvancedFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeAdvancedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoticeAdvancedFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeAdvancedPayload>
          }
          findFirst: {
            args: Prisma.NoticeAdvancedFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeAdvancedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoticeAdvancedFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeAdvancedPayload>
          }
          findMany: {
            args: Prisma.NoticeAdvancedFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeAdvancedPayload>[]
          }
          create: {
            args: Prisma.NoticeAdvancedCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeAdvancedPayload>
          }
          createMany: {
            args: Prisma.NoticeAdvancedCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NoticeAdvancedDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeAdvancedPayload>
          }
          update: {
            args: Prisma.NoticeAdvancedUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeAdvancedPayload>
          }
          deleteMany: {
            args: Prisma.NoticeAdvancedDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NoticeAdvancedUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NoticeAdvancedUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeAdvancedPayload>
          }
          aggregate: {
            args: Prisma.NoticeAdvancedAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNoticeAdvanced>
          }
          groupBy: {
            args: Prisma.NoticeAdvancedGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NoticeAdvancedGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoticeAdvancedCountArgs<ExtArgs>,
            result: $Utils.Optional<NoticeAdvancedCountAggregateOutputType> | number
          }
        }
      }
      NoticeBasic: {
        payload: NoticeBasicPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.NoticeBasicFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeBasicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoticeBasicFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeBasicPayload>
          }
          findFirst: {
            args: Prisma.NoticeBasicFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeBasicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoticeBasicFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeBasicPayload>
          }
          findMany: {
            args: Prisma.NoticeBasicFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeBasicPayload>[]
          }
          create: {
            args: Prisma.NoticeBasicCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeBasicPayload>
          }
          createMany: {
            args: Prisma.NoticeBasicCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NoticeBasicDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeBasicPayload>
          }
          update: {
            args: Prisma.NoticeBasicUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeBasicPayload>
          }
          deleteMany: {
            args: Prisma.NoticeBasicDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NoticeBasicUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NoticeBasicUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NoticeBasicPayload>
          }
          aggregate: {
            args: Prisma.NoticeBasicAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNoticeBasic>
          }
          groupBy: {
            args: Prisma.NoticeBasicGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NoticeBasicGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoticeBasicCountArgs<ExtArgs>,
            result: $Utils.Optional<NoticeBasicCountAggregateOutputType> | number
          }
        }
      }
      GraduatesYear: {
        payload: GraduatesYearPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.GraduatesYearFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GraduatesYearPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GraduatesYearFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GraduatesYearPayload>
          }
          findFirst: {
            args: Prisma.GraduatesYearFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GraduatesYearPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GraduatesYearFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GraduatesYearPayload>
          }
          findMany: {
            args: Prisma.GraduatesYearFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GraduatesYearPayload>[]
          }
          create: {
            args: Prisma.GraduatesYearCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GraduatesYearPayload>
          }
          createMany: {
            args: Prisma.GraduatesYearCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GraduatesYearDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GraduatesYearPayload>
          }
          update: {
            args: Prisma.GraduatesYearUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GraduatesYearPayload>
          }
          deleteMany: {
            args: Prisma.GraduatesYearDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GraduatesYearUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GraduatesYearUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GraduatesYearPayload>
          }
          aggregate: {
            args: Prisma.GraduatesYearAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGraduatesYear>
          }
          groupBy: {
            args: Prisma.GraduatesYearGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GraduatesYearGroupByOutputType>[]
          }
          count: {
            args: Prisma.GraduatesYearCountArgs<ExtArgs>,
            result: $Utils.Optional<GraduatesYearCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model NoticeAdvanced
   */


  export type AggregateNoticeAdvanced = {
    _count: NoticeAdvancedCountAggregateOutputType | null
    _min: NoticeAdvancedMinAggregateOutputType | null
    _max: NoticeAdvancedMaxAggregateOutputType | null
  }

  export type NoticeAdvancedMinAggregateOutputType = {
    id: string | null
    title: string | null
    desc: string | null
    date: string | null
    content: string | null
  }

  export type NoticeAdvancedMaxAggregateOutputType = {
    id: string | null
    title: string | null
    desc: string | null
    date: string | null
    content: string | null
  }

  export type NoticeAdvancedCountAggregateOutputType = {
    id: number
    title: number
    desc: number
    date: number
    content: number
    _all: number
  }


  export type NoticeAdvancedMinAggregateInputType = {
    id?: true
    title?: true
    desc?: true
    date?: true
    content?: true
  }

  export type NoticeAdvancedMaxAggregateInputType = {
    id?: true
    title?: true
    desc?: true
    date?: true
    content?: true
  }

  export type NoticeAdvancedCountAggregateInputType = {
    id?: true
    title?: true
    desc?: true
    date?: true
    content?: true
    _all?: true
  }

  export type NoticeAdvancedAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which NoticeAdvanced to aggregate.
     */
    where?: NoticeAdvancedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticeAdvanceds to fetch.
     */
    orderBy?: Enumerable<NoticeAdvancedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoticeAdvancedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticeAdvanceds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticeAdvanceds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NoticeAdvanceds
    **/
    _count?: true | NoticeAdvancedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoticeAdvancedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoticeAdvancedMaxAggregateInputType
  }

  export type GetNoticeAdvancedAggregateType<T extends NoticeAdvancedAggregateArgs> = {
        [P in keyof T & keyof AggregateNoticeAdvanced]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNoticeAdvanced[P]>
      : GetScalarType<T[P], AggregateNoticeAdvanced[P]>
  }




  export type NoticeAdvancedGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NoticeAdvancedWhereInput
    orderBy?: Enumerable<NoticeAdvancedOrderByWithAggregationInput>
    by: NoticeAdvancedScalarFieldEnum[]
    having?: NoticeAdvancedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoticeAdvancedCountAggregateInputType | true
    _min?: NoticeAdvancedMinAggregateInputType
    _max?: NoticeAdvancedMaxAggregateInputType
  }


  export type NoticeAdvancedGroupByOutputType = {
    id: string
    title: string
    desc: string
    date: string
    content: string
    _count: NoticeAdvancedCountAggregateOutputType | null
    _min: NoticeAdvancedMinAggregateOutputType | null
    _max: NoticeAdvancedMaxAggregateOutputType | null
  }

  type GetNoticeAdvancedGroupByPayload<T extends NoticeAdvancedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<NoticeAdvancedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoticeAdvancedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoticeAdvancedGroupByOutputType[P]>
            : GetScalarType<T[P], NoticeAdvancedGroupByOutputType[P]>
        }
      >
    >


  export type NoticeAdvancedSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    desc?: boolean
    date?: boolean
    content?: boolean
  }, ExtArgs["result"]["noticeAdvanced"]>

  export type NoticeAdvancedSelectScalar = {
    id?: boolean
    title?: boolean
    desc?: boolean
    date?: boolean
    content?: boolean
  }


  type NoticeAdvancedGetPayload<S extends boolean | null | undefined | NoticeAdvancedArgs> = $Types.GetResult<NoticeAdvancedPayload, S>

  type NoticeAdvancedCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<NoticeAdvancedFindManyArgs, 'select' | 'include'> & {
      select?: NoticeAdvancedCountAggregateInputType | true
    }

  export interface NoticeAdvancedDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NoticeAdvanced'], meta: { name: 'NoticeAdvanced' } }
    /**
     * Find zero or one NoticeAdvanced that matches the filter.
     * @param {NoticeAdvancedFindUniqueArgs} args - Arguments to find a NoticeAdvanced
     * @example
     * // Get one NoticeAdvanced
     * const noticeAdvanced = await prisma.noticeAdvanced.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NoticeAdvancedFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NoticeAdvancedFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'NoticeAdvanced'> extends True ? Prisma__NoticeAdvancedClient<$Types.GetResult<NoticeAdvancedPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__NoticeAdvancedClient<$Types.GetResult<NoticeAdvancedPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one NoticeAdvanced that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NoticeAdvancedFindUniqueOrThrowArgs} args - Arguments to find a NoticeAdvanced
     * @example
     * // Get one NoticeAdvanced
     * const noticeAdvanced = await prisma.noticeAdvanced.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NoticeAdvancedFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NoticeAdvancedFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NoticeAdvancedClient<$Types.GetResult<NoticeAdvancedPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first NoticeAdvanced that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeAdvancedFindFirstArgs} args - Arguments to find a NoticeAdvanced
     * @example
     * // Get one NoticeAdvanced
     * const noticeAdvanced = await prisma.noticeAdvanced.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NoticeAdvancedFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NoticeAdvancedFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'NoticeAdvanced'> extends True ? Prisma__NoticeAdvancedClient<$Types.GetResult<NoticeAdvancedPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__NoticeAdvancedClient<$Types.GetResult<NoticeAdvancedPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first NoticeAdvanced that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeAdvancedFindFirstOrThrowArgs} args - Arguments to find a NoticeAdvanced
     * @example
     * // Get one NoticeAdvanced
     * const noticeAdvanced = await prisma.noticeAdvanced.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NoticeAdvancedFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NoticeAdvancedFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NoticeAdvancedClient<$Types.GetResult<NoticeAdvancedPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more NoticeAdvanceds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeAdvancedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NoticeAdvanceds
     * const noticeAdvanceds = await prisma.noticeAdvanced.findMany()
     * 
     * // Get first 10 NoticeAdvanceds
     * const noticeAdvanceds = await prisma.noticeAdvanced.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noticeAdvancedWithIdOnly = await prisma.noticeAdvanced.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NoticeAdvancedFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoticeAdvancedFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<NoticeAdvancedPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a NoticeAdvanced.
     * @param {NoticeAdvancedCreateArgs} args - Arguments to create a NoticeAdvanced.
     * @example
     * // Create one NoticeAdvanced
     * const NoticeAdvanced = await prisma.noticeAdvanced.create({
     *   data: {
     *     // ... data to create a NoticeAdvanced
     *   }
     * })
     * 
    **/
    create<T extends NoticeAdvancedCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NoticeAdvancedCreateArgs<ExtArgs>>
    ): Prisma__NoticeAdvancedClient<$Types.GetResult<NoticeAdvancedPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many NoticeAdvanceds.
     *     @param {NoticeAdvancedCreateManyArgs} args - Arguments to create many NoticeAdvanceds.
     *     @example
     *     // Create many NoticeAdvanceds
     *     const noticeAdvanced = await prisma.noticeAdvanced.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NoticeAdvancedCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoticeAdvancedCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NoticeAdvanced.
     * @param {NoticeAdvancedDeleteArgs} args - Arguments to delete one NoticeAdvanced.
     * @example
     * // Delete one NoticeAdvanced
     * const NoticeAdvanced = await prisma.noticeAdvanced.delete({
     *   where: {
     *     // ... filter to delete one NoticeAdvanced
     *   }
     * })
     * 
    **/
    delete<T extends NoticeAdvancedDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NoticeAdvancedDeleteArgs<ExtArgs>>
    ): Prisma__NoticeAdvancedClient<$Types.GetResult<NoticeAdvancedPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one NoticeAdvanced.
     * @param {NoticeAdvancedUpdateArgs} args - Arguments to update one NoticeAdvanced.
     * @example
     * // Update one NoticeAdvanced
     * const noticeAdvanced = await prisma.noticeAdvanced.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NoticeAdvancedUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NoticeAdvancedUpdateArgs<ExtArgs>>
    ): Prisma__NoticeAdvancedClient<$Types.GetResult<NoticeAdvancedPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more NoticeAdvanceds.
     * @param {NoticeAdvancedDeleteManyArgs} args - Arguments to filter NoticeAdvanceds to delete.
     * @example
     * // Delete a few NoticeAdvanceds
     * const { count } = await prisma.noticeAdvanced.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NoticeAdvancedDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoticeAdvancedDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NoticeAdvanceds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeAdvancedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NoticeAdvanceds
     * const noticeAdvanced = await prisma.noticeAdvanced.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NoticeAdvancedUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NoticeAdvancedUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NoticeAdvanced.
     * @param {NoticeAdvancedUpsertArgs} args - Arguments to update or create a NoticeAdvanced.
     * @example
     * // Update or create a NoticeAdvanced
     * const noticeAdvanced = await prisma.noticeAdvanced.upsert({
     *   create: {
     *     // ... data to create a NoticeAdvanced
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NoticeAdvanced we want to update
     *   }
     * })
    **/
    upsert<T extends NoticeAdvancedUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NoticeAdvancedUpsertArgs<ExtArgs>>
    ): Prisma__NoticeAdvancedClient<$Types.GetResult<NoticeAdvancedPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of NoticeAdvanceds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeAdvancedCountArgs} args - Arguments to filter NoticeAdvanceds to count.
     * @example
     * // Count the number of NoticeAdvanceds
     * const count = await prisma.noticeAdvanced.count({
     *   where: {
     *     // ... the filter for the NoticeAdvanceds we want to count
     *   }
     * })
    **/
    count<T extends NoticeAdvancedCountArgs>(
      args?: Subset<T, NoticeAdvancedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoticeAdvancedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NoticeAdvanced.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeAdvancedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoticeAdvancedAggregateArgs>(args: Subset<T, NoticeAdvancedAggregateArgs>): Prisma.PrismaPromise<GetNoticeAdvancedAggregateType<T>>

    /**
     * Group by NoticeAdvanced.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeAdvancedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoticeAdvancedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoticeAdvancedGroupByArgs['orderBy'] }
        : { orderBy?: NoticeAdvancedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoticeAdvancedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoticeAdvancedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for NoticeAdvanced.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NoticeAdvancedClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * NoticeAdvanced base type for findUnique actions
   */
  export type NoticeAdvancedFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeAdvanced
     */
    select?: NoticeAdvancedSelect<ExtArgs> | null
    /**
     * Filter, which NoticeAdvanced to fetch.
     */
    where: NoticeAdvancedWhereUniqueInput
  }

  /**
   * NoticeAdvanced findUnique
   */
  export interface NoticeAdvancedFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends NoticeAdvancedFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * NoticeAdvanced findUniqueOrThrow
   */
  export type NoticeAdvancedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeAdvanced
     */
    select?: NoticeAdvancedSelect<ExtArgs> | null
    /**
     * Filter, which NoticeAdvanced to fetch.
     */
    where: NoticeAdvancedWhereUniqueInput
  }


  /**
   * NoticeAdvanced base type for findFirst actions
   */
  export type NoticeAdvancedFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeAdvanced
     */
    select?: NoticeAdvancedSelect<ExtArgs> | null
    /**
     * Filter, which NoticeAdvanced to fetch.
     */
    where?: NoticeAdvancedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticeAdvanceds to fetch.
     */
    orderBy?: Enumerable<NoticeAdvancedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NoticeAdvanceds.
     */
    cursor?: NoticeAdvancedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticeAdvanceds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticeAdvanceds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NoticeAdvanceds.
     */
    distinct?: Enumerable<NoticeAdvancedScalarFieldEnum>
  }

  /**
   * NoticeAdvanced findFirst
   */
  export interface NoticeAdvancedFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends NoticeAdvancedFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * NoticeAdvanced findFirstOrThrow
   */
  export type NoticeAdvancedFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeAdvanced
     */
    select?: NoticeAdvancedSelect<ExtArgs> | null
    /**
     * Filter, which NoticeAdvanced to fetch.
     */
    where?: NoticeAdvancedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticeAdvanceds to fetch.
     */
    orderBy?: Enumerable<NoticeAdvancedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NoticeAdvanceds.
     */
    cursor?: NoticeAdvancedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticeAdvanceds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticeAdvanceds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NoticeAdvanceds.
     */
    distinct?: Enumerable<NoticeAdvancedScalarFieldEnum>
  }


  /**
   * NoticeAdvanced findMany
   */
  export type NoticeAdvancedFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeAdvanced
     */
    select?: NoticeAdvancedSelect<ExtArgs> | null
    /**
     * Filter, which NoticeAdvanceds to fetch.
     */
    where?: NoticeAdvancedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticeAdvanceds to fetch.
     */
    orderBy?: Enumerable<NoticeAdvancedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NoticeAdvanceds.
     */
    cursor?: NoticeAdvancedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticeAdvanceds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticeAdvanceds.
     */
    skip?: number
    distinct?: Enumerable<NoticeAdvancedScalarFieldEnum>
  }


  /**
   * NoticeAdvanced create
   */
  export type NoticeAdvancedCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeAdvanced
     */
    select?: NoticeAdvancedSelect<ExtArgs> | null
    /**
     * The data needed to create a NoticeAdvanced.
     */
    data: XOR<NoticeAdvancedCreateInput, NoticeAdvancedUncheckedCreateInput>
  }


  /**
   * NoticeAdvanced createMany
   */
  export type NoticeAdvancedCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NoticeAdvanceds.
     */
    data: Enumerable<NoticeAdvancedCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * NoticeAdvanced update
   */
  export type NoticeAdvancedUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeAdvanced
     */
    select?: NoticeAdvancedSelect<ExtArgs> | null
    /**
     * The data needed to update a NoticeAdvanced.
     */
    data: XOR<NoticeAdvancedUpdateInput, NoticeAdvancedUncheckedUpdateInput>
    /**
     * Choose, which NoticeAdvanced to update.
     */
    where: NoticeAdvancedWhereUniqueInput
  }


  /**
   * NoticeAdvanced updateMany
   */
  export type NoticeAdvancedUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NoticeAdvanceds.
     */
    data: XOR<NoticeAdvancedUpdateManyMutationInput, NoticeAdvancedUncheckedUpdateManyInput>
    /**
     * Filter which NoticeAdvanceds to update
     */
    where?: NoticeAdvancedWhereInput
  }


  /**
   * NoticeAdvanced upsert
   */
  export type NoticeAdvancedUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeAdvanced
     */
    select?: NoticeAdvancedSelect<ExtArgs> | null
    /**
     * The filter to search for the NoticeAdvanced to update in case it exists.
     */
    where: NoticeAdvancedWhereUniqueInput
    /**
     * In case the NoticeAdvanced found by the `where` argument doesn't exist, create a new NoticeAdvanced with this data.
     */
    create: XOR<NoticeAdvancedCreateInput, NoticeAdvancedUncheckedCreateInput>
    /**
     * In case the NoticeAdvanced was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoticeAdvancedUpdateInput, NoticeAdvancedUncheckedUpdateInput>
  }


  /**
   * NoticeAdvanced delete
   */
  export type NoticeAdvancedDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeAdvanced
     */
    select?: NoticeAdvancedSelect<ExtArgs> | null
    /**
     * Filter which NoticeAdvanced to delete.
     */
    where: NoticeAdvancedWhereUniqueInput
  }


  /**
   * NoticeAdvanced deleteMany
   */
  export type NoticeAdvancedDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which NoticeAdvanceds to delete
     */
    where?: NoticeAdvancedWhereInput
  }


  /**
   * NoticeAdvanced without action
   */
  export type NoticeAdvancedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeAdvanced
     */
    select?: NoticeAdvancedSelect<ExtArgs> | null
  }



  /**
   * Model NoticeBasic
   */


  export type AggregateNoticeBasic = {
    _count: NoticeBasicCountAggregateOutputType | null
    _min: NoticeBasicMinAggregateOutputType | null
    _max: NoticeBasicMaxAggregateOutputType | null
  }

  export type NoticeBasicMinAggregateOutputType = {
    id: string | null
    date: string | null
    content: string | null
  }

  export type NoticeBasicMaxAggregateOutputType = {
    id: string | null
    date: string | null
    content: string | null
  }

  export type NoticeBasicCountAggregateOutputType = {
    id: number
    date: number
    content: number
    _all: number
  }


  export type NoticeBasicMinAggregateInputType = {
    id?: true
    date?: true
    content?: true
  }

  export type NoticeBasicMaxAggregateInputType = {
    id?: true
    date?: true
    content?: true
  }

  export type NoticeBasicCountAggregateInputType = {
    id?: true
    date?: true
    content?: true
    _all?: true
  }

  export type NoticeBasicAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which NoticeBasic to aggregate.
     */
    where?: NoticeBasicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticeBasics to fetch.
     */
    orderBy?: Enumerable<NoticeBasicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoticeBasicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticeBasics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticeBasics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NoticeBasics
    **/
    _count?: true | NoticeBasicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoticeBasicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoticeBasicMaxAggregateInputType
  }

  export type GetNoticeBasicAggregateType<T extends NoticeBasicAggregateArgs> = {
        [P in keyof T & keyof AggregateNoticeBasic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNoticeBasic[P]>
      : GetScalarType<T[P], AggregateNoticeBasic[P]>
  }




  export type NoticeBasicGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NoticeBasicWhereInput
    orderBy?: Enumerable<NoticeBasicOrderByWithAggregationInput>
    by: NoticeBasicScalarFieldEnum[]
    having?: NoticeBasicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoticeBasicCountAggregateInputType | true
    _min?: NoticeBasicMinAggregateInputType
    _max?: NoticeBasicMaxAggregateInputType
  }


  export type NoticeBasicGroupByOutputType = {
    id: string
    date: string
    content: string
    _count: NoticeBasicCountAggregateOutputType | null
    _min: NoticeBasicMinAggregateOutputType | null
    _max: NoticeBasicMaxAggregateOutputType | null
  }

  type GetNoticeBasicGroupByPayload<T extends NoticeBasicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<NoticeBasicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoticeBasicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoticeBasicGroupByOutputType[P]>
            : GetScalarType<T[P], NoticeBasicGroupByOutputType[P]>
        }
      >
    >


  export type NoticeBasicSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    content?: boolean
  }, ExtArgs["result"]["noticeBasic"]>

  export type NoticeBasicSelectScalar = {
    id?: boolean
    date?: boolean
    content?: boolean
  }


  type NoticeBasicGetPayload<S extends boolean | null | undefined | NoticeBasicArgs> = $Types.GetResult<NoticeBasicPayload, S>

  type NoticeBasicCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<NoticeBasicFindManyArgs, 'select' | 'include'> & {
      select?: NoticeBasicCountAggregateInputType | true
    }

  export interface NoticeBasicDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NoticeBasic'], meta: { name: 'NoticeBasic' } }
    /**
     * Find zero or one NoticeBasic that matches the filter.
     * @param {NoticeBasicFindUniqueArgs} args - Arguments to find a NoticeBasic
     * @example
     * // Get one NoticeBasic
     * const noticeBasic = await prisma.noticeBasic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NoticeBasicFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NoticeBasicFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'NoticeBasic'> extends True ? Prisma__NoticeBasicClient<$Types.GetResult<NoticeBasicPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__NoticeBasicClient<$Types.GetResult<NoticeBasicPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one NoticeBasic that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NoticeBasicFindUniqueOrThrowArgs} args - Arguments to find a NoticeBasic
     * @example
     * // Get one NoticeBasic
     * const noticeBasic = await prisma.noticeBasic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NoticeBasicFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NoticeBasicFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NoticeBasicClient<$Types.GetResult<NoticeBasicPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first NoticeBasic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeBasicFindFirstArgs} args - Arguments to find a NoticeBasic
     * @example
     * // Get one NoticeBasic
     * const noticeBasic = await prisma.noticeBasic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NoticeBasicFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NoticeBasicFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'NoticeBasic'> extends True ? Prisma__NoticeBasicClient<$Types.GetResult<NoticeBasicPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__NoticeBasicClient<$Types.GetResult<NoticeBasicPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first NoticeBasic that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeBasicFindFirstOrThrowArgs} args - Arguments to find a NoticeBasic
     * @example
     * // Get one NoticeBasic
     * const noticeBasic = await prisma.noticeBasic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NoticeBasicFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NoticeBasicFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NoticeBasicClient<$Types.GetResult<NoticeBasicPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more NoticeBasics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeBasicFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NoticeBasics
     * const noticeBasics = await prisma.noticeBasic.findMany()
     * 
     * // Get first 10 NoticeBasics
     * const noticeBasics = await prisma.noticeBasic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noticeBasicWithIdOnly = await prisma.noticeBasic.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NoticeBasicFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoticeBasicFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<NoticeBasicPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a NoticeBasic.
     * @param {NoticeBasicCreateArgs} args - Arguments to create a NoticeBasic.
     * @example
     * // Create one NoticeBasic
     * const NoticeBasic = await prisma.noticeBasic.create({
     *   data: {
     *     // ... data to create a NoticeBasic
     *   }
     * })
     * 
    **/
    create<T extends NoticeBasicCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NoticeBasicCreateArgs<ExtArgs>>
    ): Prisma__NoticeBasicClient<$Types.GetResult<NoticeBasicPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many NoticeBasics.
     *     @param {NoticeBasicCreateManyArgs} args - Arguments to create many NoticeBasics.
     *     @example
     *     // Create many NoticeBasics
     *     const noticeBasic = await prisma.noticeBasic.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NoticeBasicCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoticeBasicCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NoticeBasic.
     * @param {NoticeBasicDeleteArgs} args - Arguments to delete one NoticeBasic.
     * @example
     * // Delete one NoticeBasic
     * const NoticeBasic = await prisma.noticeBasic.delete({
     *   where: {
     *     // ... filter to delete one NoticeBasic
     *   }
     * })
     * 
    **/
    delete<T extends NoticeBasicDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NoticeBasicDeleteArgs<ExtArgs>>
    ): Prisma__NoticeBasicClient<$Types.GetResult<NoticeBasicPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one NoticeBasic.
     * @param {NoticeBasicUpdateArgs} args - Arguments to update one NoticeBasic.
     * @example
     * // Update one NoticeBasic
     * const noticeBasic = await prisma.noticeBasic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NoticeBasicUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NoticeBasicUpdateArgs<ExtArgs>>
    ): Prisma__NoticeBasicClient<$Types.GetResult<NoticeBasicPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more NoticeBasics.
     * @param {NoticeBasicDeleteManyArgs} args - Arguments to filter NoticeBasics to delete.
     * @example
     * // Delete a few NoticeBasics
     * const { count } = await prisma.noticeBasic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NoticeBasicDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoticeBasicDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NoticeBasics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeBasicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NoticeBasics
     * const noticeBasic = await prisma.noticeBasic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NoticeBasicUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NoticeBasicUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NoticeBasic.
     * @param {NoticeBasicUpsertArgs} args - Arguments to update or create a NoticeBasic.
     * @example
     * // Update or create a NoticeBasic
     * const noticeBasic = await prisma.noticeBasic.upsert({
     *   create: {
     *     // ... data to create a NoticeBasic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NoticeBasic we want to update
     *   }
     * })
    **/
    upsert<T extends NoticeBasicUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NoticeBasicUpsertArgs<ExtArgs>>
    ): Prisma__NoticeBasicClient<$Types.GetResult<NoticeBasicPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of NoticeBasics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeBasicCountArgs} args - Arguments to filter NoticeBasics to count.
     * @example
     * // Count the number of NoticeBasics
     * const count = await prisma.noticeBasic.count({
     *   where: {
     *     // ... the filter for the NoticeBasics we want to count
     *   }
     * })
    **/
    count<T extends NoticeBasicCountArgs>(
      args?: Subset<T, NoticeBasicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoticeBasicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NoticeBasic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeBasicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoticeBasicAggregateArgs>(args: Subset<T, NoticeBasicAggregateArgs>): Prisma.PrismaPromise<GetNoticeBasicAggregateType<T>>

    /**
     * Group by NoticeBasic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeBasicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoticeBasicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoticeBasicGroupByArgs['orderBy'] }
        : { orderBy?: NoticeBasicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoticeBasicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoticeBasicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for NoticeBasic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NoticeBasicClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * NoticeBasic base type for findUnique actions
   */
  export type NoticeBasicFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBasic
     */
    select?: NoticeBasicSelect<ExtArgs> | null
    /**
     * Filter, which NoticeBasic to fetch.
     */
    where: NoticeBasicWhereUniqueInput
  }

  /**
   * NoticeBasic findUnique
   */
  export interface NoticeBasicFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends NoticeBasicFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * NoticeBasic findUniqueOrThrow
   */
  export type NoticeBasicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBasic
     */
    select?: NoticeBasicSelect<ExtArgs> | null
    /**
     * Filter, which NoticeBasic to fetch.
     */
    where: NoticeBasicWhereUniqueInput
  }


  /**
   * NoticeBasic base type for findFirst actions
   */
  export type NoticeBasicFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBasic
     */
    select?: NoticeBasicSelect<ExtArgs> | null
    /**
     * Filter, which NoticeBasic to fetch.
     */
    where?: NoticeBasicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticeBasics to fetch.
     */
    orderBy?: Enumerable<NoticeBasicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NoticeBasics.
     */
    cursor?: NoticeBasicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticeBasics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticeBasics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NoticeBasics.
     */
    distinct?: Enumerable<NoticeBasicScalarFieldEnum>
  }

  /**
   * NoticeBasic findFirst
   */
  export interface NoticeBasicFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends NoticeBasicFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * NoticeBasic findFirstOrThrow
   */
  export type NoticeBasicFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBasic
     */
    select?: NoticeBasicSelect<ExtArgs> | null
    /**
     * Filter, which NoticeBasic to fetch.
     */
    where?: NoticeBasicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticeBasics to fetch.
     */
    orderBy?: Enumerable<NoticeBasicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NoticeBasics.
     */
    cursor?: NoticeBasicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticeBasics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticeBasics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NoticeBasics.
     */
    distinct?: Enumerable<NoticeBasicScalarFieldEnum>
  }


  /**
   * NoticeBasic findMany
   */
  export type NoticeBasicFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBasic
     */
    select?: NoticeBasicSelect<ExtArgs> | null
    /**
     * Filter, which NoticeBasics to fetch.
     */
    where?: NoticeBasicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticeBasics to fetch.
     */
    orderBy?: Enumerable<NoticeBasicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NoticeBasics.
     */
    cursor?: NoticeBasicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticeBasics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticeBasics.
     */
    skip?: number
    distinct?: Enumerable<NoticeBasicScalarFieldEnum>
  }


  /**
   * NoticeBasic create
   */
  export type NoticeBasicCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBasic
     */
    select?: NoticeBasicSelect<ExtArgs> | null
    /**
     * The data needed to create a NoticeBasic.
     */
    data: XOR<NoticeBasicCreateInput, NoticeBasicUncheckedCreateInput>
  }


  /**
   * NoticeBasic createMany
   */
  export type NoticeBasicCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NoticeBasics.
     */
    data: Enumerable<NoticeBasicCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * NoticeBasic update
   */
  export type NoticeBasicUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBasic
     */
    select?: NoticeBasicSelect<ExtArgs> | null
    /**
     * The data needed to update a NoticeBasic.
     */
    data: XOR<NoticeBasicUpdateInput, NoticeBasicUncheckedUpdateInput>
    /**
     * Choose, which NoticeBasic to update.
     */
    where: NoticeBasicWhereUniqueInput
  }


  /**
   * NoticeBasic updateMany
   */
  export type NoticeBasicUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NoticeBasics.
     */
    data: XOR<NoticeBasicUpdateManyMutationInput, NoticeBasicUncheckedUpdateManyInput>
    /**
     * Filter which NoticeBasics to update
     */
    where?: NoticeBasicWhereInput
  }


  /**
   * NoticeBasic upsert
   */
  export type NoticeBasicUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBasic
     */
    select?: NoticeBasicSelect<ExtArgs> | null
    /**
     * The filter to search for the NoticeBasic to update in case it exists.
     */
    where: NoticeBasicWhereUniqueInput
    /**
     * In case the NoticeBasic found by the `where` argument doesn't exist, create a new NoticeBasic with this data.
     */
    create: XOR<NoticeBasicCreateInput, NoticeBasicUncheckedCreateInput>
    /**
     * In case the NoticeBasic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoticeBasicUpdateInput, NoticeBasicUncheckedUpdateInput>
  }


  /**
   * NoticeBasic delete
   */
  export type NoticeBasicDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBasic
     */
    select?: NoticeBasicSelect<ExtArgs> | null
    /**
     * Filter which NoticeBasic to delete.
     */
    where: NoticeBasicWhereUniqueInput
  }


  /**
   * NoticeBasic deleteMany
   */
  export type NoticeBasicDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which NoticeBasics to delete
     */
    where?: NoticeBasicWhereInput
  }


  /**
   * NoticeBasic without action
   */
  export type NoticeBasicArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBasic
     */
    select?: NoticeBasicSelect<ExtArgs> | null
  }



  /**
   * Model GraduatesYear
   */


  export type AggregateGraduatesYear = {
    _count: GraduatesYearCountAggregateOutputType | null
    _avg: GraduatesYearAvgAggregateOutputType | null
    _sum: GraduatesYearSumAggregateOutputType | null
    _min: GraduatesYearMinAggregateOutputType | null
    _max: GraduatesYearMaxAggregateOutputType | null
  }

  export type GraduatesYearAvgAggregateOutputType = {
    year: number | null
  }

  export type GraduatesYearSumAggregateOutputType = {
    year: number | null
  }

  export type GraduatesYearMinAggregateOutputType = {
    year: number | null
    graduates: string | null
  }

  export type GraduatesYearMaxAggregateOutputType = {
    year: number | null
    graduates: string | null
  }

  export type GraduatesYearCountAggregateOutputType = {
    year: number
    graduates: number
    _all: number
  }


  export type GraduatesYearAvgAggregateInputType = {
    year?: true
  }

  export type GraduatesYearSumAggregateInputType = {
    year?: true
  }

  export type GraduatesYearMinAggregateInputType = {
    year?: true
    graduates?: true
  }

  export type GraduatesYearMaxAggregateInputType = {
    year?: true
    graduates?: true
  }

  export type GraduatesYearCountAggregateInputType = {
    year?: true
    graduates?: true
    _all?: true
  }

  export type GraduatesYearAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which GraduatesYear to aggregate.
     */
    where?: GraduatesYearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GraduatesYears to fetch.
     */
    orderBy?: Enumerable<GraduatesYearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GraduatesYearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GraduatesYears from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GraduatesYears.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GraduatesYears
    **/
    _count?: true | GraduatesYearCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GraduatesYearAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GraduatesYearSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GraduatesYearMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GraduatesYearMaxAggregateInputType
  }

  export type GetGraduatesYearAggregateType<T extends GraduatesYearAggregateArgs> = {
        [P in keyof T & keyof AggregateGraduatesYear]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGraduatesYear[P]>
      : GetScalarType<T[P], AggregateGraduatesYear[P]>
  }




  export type GraduatesYearGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GraduatesYearWhereInput
    orderBy?: Enumerable<GraduatesYearOrderByWithAggregationInput>
    by: GraduatesYearScalarFieldEnum[]
    having?: GraduatesYearScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GraduatesYearCountAggregateInputType | true
    _avg?: GraduatesYearAvgAggregateInputType
    _sum?: GraduatesYearSumAggregateInputType
    _min?: GraduatesYearMinAggregateInputType
    _max?: GraduatesYearMaxAggregateInputType
  }


  export type GraduatesYearGroupByOutputType = {
    year: number
    graduates: string
    _count: GraduatesYearCountAggregateOutputType | null
    _avg: GraduatesYearAvgAggregateOutputType | null
    _sum: GraduatesYearSumAggregateOutputType | null
    _min: GraduatesYearMinAggregateOutputType | null
    _max: GraduatesYearMaxAggregateOutputType | null
  }

  type GetGraduatesYearGroupByPayload<T extends GraduatesYearGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GraduatesYearGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GraduatesYearGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GraduatesYearGroupByOutputType[P]>
            : GetScalarType<T[P], GraduatesYearGroupByOutputType[P]>
        }
      >
    >


  export type GraduatesYearSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    year?: boolean
    graduates?: boolean
  }, ExtArgs["result"]["graduatesYear"]>

  export type GraduatesYearSelectScalar = {
    year?: boolean
    graduates?: boolean
  }


  type GraduatesYearGetPayload<S extends boolean | null | undefined | GraduatesYearArgs> = $Types.GetResult<GraduatesYearPayload, S>

  type GraduatesYearCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<GraduatesYearFindManyArgs, 'select' | 'include'> & {
      select?: GraduatesYearCountAggregateInputType | true
    }

  export interface GraduatesYearDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GraduatesYear'], meta: { name: 'GraduatesYear' } }
    /**
     * Find zero or one GraduatesYear that matches the filter.
     * @param {GraduatesYearFindUniqueArgs} args - Arguments to find a GraduatesYear
     * @example
     * // Get one GraduatesYear
     * const graduatesYear = await prisma.graduatesYear.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GraduatesYearFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GraduatesYearFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GraduatesYear'> extends True ? Prisma__GraduatesYearClient<$Types.GetResult<GraduatesYearPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__GraduatesYearClient<$Types.GetResult<GraduatesYearPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one GraduatesYear that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GraduatesYearFindUniqueOrThrowArgs} args - Arguments to find a GraduatesYear
     * @example
     * // Get one GraduatesYear
     * const graduatesYear = await prisma.graduatesYear.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GraduatesYearFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GraduatesYearFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GraduatesYearClient<$Types.GetResult<GraduatesYearPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first GraduatesYear that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GraduatesYearFindFirstArgs} args - Arguments to find a GraduatesYear
     * @example
     * // Get one GraduatesYear
     * const graduatesYear = await prisma.graduatesYear.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GraduatesYearFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GraduatesYearFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GraduatesYear'> extends True ? Prisma__GraduatesYearClient<$Types.GetResult<GraduatesYearPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__GraduatesYearClient<$Types.GetResult<GraduatesYearPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first GraduatesYear that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GraduatesYearFindFirstOrThrowArgs} args - Arguments to find a GraduatesYear
     * @example
     * // Get one GraduatesYear
     * const graduatesYear = await prisma.graduatesYear.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GraduatesYearFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GraduatesYearFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GraduatesYearClient<$Types.GetResult<GraduatesYearPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more GraduatesYears that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GraduatesYearFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GraduatesYears
     * const graduatesYears = await prisma.graduatesYear.findMany()
     * 
     * // Get first 10 GraduatesYears
     * const graduatesYears = await prisma.graduatesYear.findMany({ take: 10 })
     * 
     * // Only select the `year`
     * const graduatesYearWithYearOnly = await prisma.graduatesYear.findMany({ select: { year: true } })
     * 
    **/
    findMany<T extends GraduatesYearFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GraduatesYearFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<GraduatesYearPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a GraduatesYear.
     * @param {GraduatesYearCreateArgs} args - Arguments to create a GraduatesYear.
     * @example
     * // Create one GraduatesYear
     * const GraduatesYear = await prisma.graduatesYear.create({
     *   data: {
     *     // ... data to create a GraduatesYear
     *   }
     * })
     * 
    **/
    create<T extends GraduatesYearCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GraduatesYearCreateArgs<ExtArgs>>
    ): Prisma__GraduatesYearClient<$Types.GetResult<GraduatesYearPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many GraduatesYears.
     *     @param {GraduatesYearCreateManyArgs} args - Arguments to create many GraduatesYears.
     *     @example
     *     // Create many GraduatesYears
     *     const graduatesYear = await prisma.graduatesYear.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GraduatesYearCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GraduatesYearCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GraduatesYear.
     * @param {GraduatesYearDeleteArgs} args - Arguments to delete one GraduatesYear.
     * @example
     * // Delete one GraduatesYear
     * const GraduatesYear = await prisma.graduatesYear.delete({
     *   where: {
     *     // ... filter to delete one GraduatesYear
     *   }
     * })
     * 
    **/
    delete<T extends GraduatesYearDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GraduatesYearDeleteArgs<ExtArgs>>
    ): Prisma__GraduatesYearClient<$Types.GetResult<GraduatesYearPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one GraduatesYear.
     * @param {GraduatesYearUpdateArgs} args - Arguments to update one GraduatesYear.
     * @example
     * // Update one GraduatesYear
     * const graduatesYear = await prisma.graduatesYear.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GraduatesYearUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GraduatesYearUpdateArgs<ExtArgs>>
    ): Prisma__GraduatesYearClient<$Types.GetResult<GraduatesYearPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more GraduatesYears.
     * @param {GraduatesYearDeleteManyArgs} args - Arguments to filter GraduatesYears to delete.
     * @example
     * // Delete a few GraduatesYears
     * const { count } = await prisma.graduatesYear.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GraduatesYearDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GraduatesYearDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GraduatesYears.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GraduatesYearUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GraduatesYears
     * const graduatesYear = await prisma.graduatesYear.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GraduatesYearUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GraduatesYearUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GraduatesYear.
     * @param {GraduatesYearUpsertArgs} args - Arguments to update or create a GraduatesYear.
     * @example
     * // Update or create a GraduatesYear
     * const graduatesYear = await prisma.graduatesYear.upsert({
     *   create: {
     *     // ... data to create a GraduatesYear
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GraduatesYear we want to update
     *   }
     * })
    **/
    upsert<T extends GraduatesYearUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GraduatesYearUpsertArgs<ExtArgs>>
    ): Prisma__GraduatesYearClient<$Types.GetResult<GraduatesYearPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of GraduatesYears.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GraduatesYearCountArgs} args - Arguments to filter GraduatesYears to count.
     * @example
     * // Count the number of GraduatesYears
     * const count = await prisma.graduatesYear.count({
     *   where: {
     *     // ... the filter for the GraduatesYears we want to count
     *   }
     * })
    **/
    count<T extends GraduatesYearCountArgs>(
      args?: Subset<T, GraduatesYearCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GraduatesYearCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GraduatesYear.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GraduatesYearAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GraduatesYearAggregateArgs>(args: Subset<T, GraduatesYearAggregateArgs>): Prisma.PrismaPromise<GetGraduatesYearAggregateType<T>>

    /**
     * Group by GraduatesYear.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GraduatesYearGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GraduatesYearGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GraduatesYearGroupByArgs['orderBy'] }
        : { orderBy?: GraduatesYearGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GraduatesYearGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGraduatesYearGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GraduatesYear.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GraduatesYearClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GraduatesYear base type for findUnique actions
   */
  export type GraduatesYearFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GraduatesYear
     */
    select?: GraduatesYearSelect<ExtArgs> | null
    /**
     * Filter, which GraduatesYear to fetch.
     */
    where: GraduatesYearWhereUniqueInput
  }

  /**
   * GraduatesYear findUnique
   */
  export interface GraduatesYearFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends GraduatesYearFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GraduatesYear findUniqueOrThrow
   */
  export type GraduatesYearFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GraduatesYear
     */
    select?: GraduatesYearSelect<ExtArgs> | null
    /**
     * Filter, which GraduatesYear to fetch.
     */
    where: GraduatesYearWhereUniqueInput
  }


  /**
   * GraduatesYear base type for findFirst actions
   */
  export type GraduatesYearFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GraduatesYear
     */
    select?: GraduatesYearSelect<ExtArgs> | null
    /**
     * Filter, which GraduatesYear to fetch.
     */
    where?: GraduatesYearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GraduatesYears to fetch.
     */
    orderBy?: Enumerable<GraduatesYearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GraduatesYears.
     */
    cursor?: GraduatesYearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GraduatesYears from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GraduatesYears.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GraduatesYears.
     */
    distinct?: Enumerable<GraduatesYearScalarFieldEnum>
  }

  /**
   * GraduatesYear findFirst
   */
  export interface GraduatesYearFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends GraduatesYearFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GraduatesYear findFirstOrThrow
   */
  export type GraduatesYearFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GraduatesYear
     */
    select?: GraduatesYearSelect<ExtArgs> | null
    /**
     * Filter, which GraduatesYear to fetch.
     */
    where?: GraduatesYearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GraduatesYears to fetch.
     */
    orderBy?: Enumerable<GraduatesYearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GraduatesYears.
     */
    cursor?: GraduatesYearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GraduatesYears from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GraduatesYears.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GraduatesYears.
     */
    distinct?: Enumerable<GraduatesYearScalarFieldEnum>
  }


  /**
   * GraduatesYear findMany
   */
  export type GraduatesYearFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GraduatesYear
     */
    select?: GraduatesYearSelect<ExtArgs> | null
    /**
     * Filter, which GraduatesYears to fetch.
     */
    where?: GraduatesYearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GraduatesYears to fetch.
     */
    orderBy?: Enumerable<GraduatesYearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GraduatesYears.
     */
    cursor?: GraduatesYearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GraduatesYears from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GraduatesYears.
     */
    skip?: number
    distinct?: Enumerable<GraduatesYearScalarFieldEnum>
  }


  /**
   * GraduatesYear create
   */
  export type GraduatesYearCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GraduatesYear
     */
    select?: GraduatesYearSelect<ExtArgs> | null
    /**
     * The data needed to create a GraduatesYear.
     */
    data: XOR<GraduatesYearCreateInput, GraduatesYearUncheckedCreateInput>
  }


  /**
   * GraduatesYear createMany
   */
  export type GraduatesYearCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GraduatesYears.
     */
    data: Enumerable<GraduatesYearCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GraduatesYear update
   */
  export type GraduatesYearUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GraduatesYear
     */
    select?: GraduatesYearSelect<ExtArgs> | null
    /**
     * The data needed to update a GraduatesYear.
     */
    data: XOR<GraduatesYearUpdateInput, GraduatesYearUncheckedUpdateInput>
    /**
     * Choose, which GraduatesYear to update.
     */
    where: GraduatesYearWhereUniqueInput
  }


  /**
   * GraduatesYear updateMany
   */
  export type GraduatesYearUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GraduatesYears.
     */
    data: XOR<GraduatesYearUpdateManyMutationInput, GraduatesYearUncheckedUpdateManyInput>
    /**
     * Filter which GraduatesYears to update
     */
    where?: GraduatesYearWhereInput
  }


  /**
   * GraduatesYear upsert
   */
  export type GraduatesYearUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GraduatesYear
     */
    select?: GraduatesYearSelect<ExtArgs> | null
    /**
     * The filter to search for the GraduatesYear to update in case it exists.
     */
    where: GraduatesYearWhereUniqueInput
    /**
     * In case the GraduatesYear found by the `where` argument doesn't exist, create a new GraduatesYear with this data.
     */
    create: XOR<GraduatesYearCreateInput, GraduatesYearUncheckedCreateInput>
    /**
     * In case the GraduatesYear was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GraduatesYearUpdateInput, GraduatesYearUncheckedUpdateInput>
  }


  /**
   * GraduatesYear delete
   */
  export type GraduatesYearDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GraduatesYear
     */
    select?: GraduatesYearSelect<ExtArgs> | null
    /**
     * Filter which GraduatesYear to delete.
     */
    where: GraduatesYearWhereUniqueInput
  }


  /**
   * GraduatesYear deleteMany
   */
  export type GraduatesYearDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which GraduatesYears to delete
     */
    where?: GraduatesYearWhereInput
  }


  /**
   * GraduatesYear without action
   */
  export type GraduatesYearArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GraduatesYear
     */
    select?: GraduatesYearSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const NoticeAdvancedScalarFieldEnum: {
    id: 'id',
    title: 'title',
    desc: 'desc',
    date: 'date',
    content: 'content'
  };

  export type NoticeAdvancedScalarFieldEnum = (typeof NoticeAdvancedScalarFieldEnum)[keyof typeof NoticeAdvancedScalarFieldEnum]


  export const NoticeBasicScalarFieldEnum: {
    id: 'id',
    date: 'date',
    content: 'content'
  };

  export type NoticeBasicScalarFieldEnum = (typeof NoticeBasicScalarFieldEnum)[keyof typeof NoticeBasicScalarFieldEnum]


  export const GraduatesYearScalarFieldEnum: {
    year: 'year',
    graduates: 'graduates'
  };

  export type GraduatesYearScalarFieldEnum = (typeof GraduatesYearScalarFieldEnum)[keyof typeof GraduatesYearScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type NoticeAdvancedWhereInput = {
    AND?: Enumerable<NoticeAdvancedWhereInput>
    OR?: Enumerable<NoticeAdvancedWhereInput>
    NOT?: Enumerable<NoticeAdvancedWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    desc?: StringFilter | string
    date?: StringFilter | string
    content?: StringFilter | string
  }

  export type NoticeAdvancedOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    desc?: SortOrder
    date?: SortOrder
    content?: SortOrder
  }

  export type NoticeAdvancedWhereUniqueInput = {
    id?: string
  }

  export type NoticeAdvancedOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    desc?: SortOrder
    date?: SortOrder
    content?: SortOrder
    _count?: NoticeAdvancedCountOrderByAggregateInput
    _max?: NoticeAdvancedMaxOrderByAggregateInput
    _min?: NoticeAdvancedMinOrderByAggregateInput
  }

  export type NoticeAdvancedScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NoticeAdvancedScalarWhereWithAggregatesInput>
    OR?: Enumerable<NoticeAdvancedScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NoticeAdvancedScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    desc?: StringWithAggregatesFilter | string
    date?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
  }

  export type NoticeBasicWhereInput = {
    AND?: Enumerable<NoticeBasicWhereInput>
    OR?: Enumerable<NoticeBasicWhereInput>
    NOT?: Enumerable<NoticeBasicWhereInput>
    id?: StringFilter | string
    date?: StringFilter | string
    content?: StringFilter | string
  }

  export type NoticeBasicOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    content?: SortOrder
  }

  export type NoticeBasicWhereUniqueInput = {
    id?: string
  }

  export type NoticeBasicOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    content?: SortOrder
    _count?: NoticeBasicCountOrderByAggregateInput
    _max?: NoticeBasicMaxOrderByAggregateInput
    _min?: NoticeBasicMinOrderByAggregateInput
  }

  export type NoticeBasicScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NoticeBasicScalarWhereWithAggregatesInput>
    OR?: Enumerable<NoticeBasicScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NoticeBasicScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    date?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
  }

  export type GraduatesYearWhereInput = {
    AND?: Enumerable<GraduatesYearWhereInput>
    OR?: Enumerable<GraduatesYearWhereInput>
    NOT?: Enumerable<GraduatesYearWhereInput>
    year?: IntFilter | number
    graduates?: StringFilter | string
  }

  export type GraduatesYearOrderByWithRelationInput = {
    year?: SortOrder
    graduates?: SortOrder
  }

  export type GraduatesYearWhereUniqueInput = {
    year?: number
  }

  export type GraduatesYearOrderByWithAggregationInput = {
    year?: SortOrder
    graduates?: SortOrder
    _count?: GraduatesYearCountOrderByAggregateInput
    _avg?: GraduatesYearAvgOrderByAggregateInput
    _max?: GraduatesYearMaxOrderByAggregateInput
    _min?: GraduatesYearMinOrderByAggregateInput
    _sum?: GraduatesYearSumOrderByAggregateInput
  }

  export type GraduatesYearScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GraduatesYearScalarWhereWithAggregatesInput>
    OR?: Enumerable<GraduatesYearScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GraduatesYearScalarWhereWithAggregatesInput>
    year?: IntWithAggregatesFilter | number
    graduates?: StringWithAggregatesFilter | string
  }

  export type NoticeAdvancedCreateInput = {
    id?: string
    title: string
    desc: string
    date: string
    content: string
  }

  export type NoticeAdvancedUncheckedCreateInput = {
    id?: string
    title: string
    desc: string
    date: string
    content: string
  }

  export type NoticeAdvancedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type NoticeAdvancedUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type NoticeAdvancedCreateManyInput = {
    id?: string
    title: string
    desc: string
    date: string
    content: string
  }

  export type NoticeAdvancedUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type NoticeAdvancedUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type NoticeBasicCreateInput = {
    id?: string
    date: string
    content: string
  }

  export type NoticeBasicUncheckedCreateInput = {
    id?: string
    date: string
    content: string
  }

  export type NoticeBasicUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type NoticeBasicUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type NoticeBasicCreateManyInput = {
    id?: string
    date: string
    content: string
  }

  export type NoticeBasicUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type NoticeBasicUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type GraduatesYearCreateInput = {
    year: number
    graduates: string
  }

  export type GraduatesYearUncheckedCreateInput = {
    year: number
    graduates: string
  }

  export type GraduatesYearUpdateInput = {
    year?: IntFieldUpdateOperationsInput | number
    graduates?: StringFieldUpdateOperationsInput | string
  }

  export type GraduatesYearUncheckedUpdateInput = {
    year?: IntFieldUpdateOperationsInput | number
    graduates?: StringFieldUpdateOperationsInput | string
  }

  export type GraduatesYearCreateManyInput = {
    year: number
    graduates: string
  }

  export type GraduatesYearUpdateManyMutationInput = {
    year?: IntFieldUpdateOperationsInput | number
    graduates?: StringFieldUpdateOperationsInput | string
  }

  export type GraduatesYearUncheckedUpdateManyInput = {
    year?: IntFieldUpdateOperationsInput | number
    graduates?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type NoticeAdvancedCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    desc?: SortOrder
    date?: SortOrder
    content?: SortOrder
  }

  export type NoticeAdvancedMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    desc?: SortOrder
    date?: SortOrder
    content?: SortOrder
  }

  export type NoticeAdvancedMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    desc?: SortOrder
    date?: SortOrder
    content?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NoticeBasicCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    content?: SortOrder
  }

  export type NoticeBasicMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    content?: SortOrder
  }

  export type NoticeBasicMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    content?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type GraduatesYearCountOrderByAggregateInput = {
    year?: SortOrder
    graduates?: SortOrder
  }

  export type GraduatesYearAvgOrderByAggregateInput = {
    year?: SortOrder
  }

  export type GraduatesYearMaxOrderByAggregateInput = {
    year?: SortOrder
    graduates?: SortOrder
  }

  export type GraduatesYearMinOrderByAggregateInput = {
    year?: SortOrder
    graduates?: SortOrder
  }

  export type GraduatesYearSumOrderByAggregateInput = {
    year?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}